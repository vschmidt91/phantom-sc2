---

on:
  push:
    branches:
      - main
      - dev

env:
  ZIP_NAME: PhantomBot

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          ref: ${{ github.head_ref }}
      - name: Checkout submodules
        run: git submodule update --init --recursive
      - name: Install poetry
        run: pipx install poetry
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'poetry'
      - name: Update pip
        run: poetry run pip install -U pip
      - name: Install requirements
        run: poetry install --no-root --extras test --extras build
      - name: Linting and Typechecking
        run: make check
      - name: Compile and Build
        run: make zip
      - uses: actions/upload-artifact@v4
        with:
          compression-level: 9
          name: ${{ env.ZIP_NAME }}
          path: build

  run_test_game:
    name: Run test game
    needs: build
    runs-on: ubuntu-latest
    container:
      image: burnysc2/python-sc2-docker:latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
      - name: Install requirements
        run: |
          python -m pip install -U pip
          python -m pip install -r requirements.txt
      - name: Run game
        env:
          SC2PATH: "/root/StarCraftII/"
        run: python run.py --config config/run/test.toml

  upload_to_ai_arena:
    name: Upload to AI Arena
    needs:
      - build
      - run_test_game
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: pip install click requests
      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: bot
      - name: Compress bot zip
        working-directory: bot
        run: zip -r -9 bot.zip bot
      - name: Upload to AIArena
        env:
          UPLOAD_API_TOKEN:
            ${{ secrets.UPLOAD_API_TOKEN }}
          UPLOAD_BOT_ID:
            ${{ secrets[format('UPLOAD_BOT_ID_{0}', github.ref_name)] }}
        run: python scripts/upload_to_ai_arena.py bot/bot.zip
